目录	15
译者序	5
作者简介	7
评审者简介	9
前言	29
第1章　Elasticsearch简介	19
	1.1　Apache Lucene简介	19
		1.1.1　熟悉Lucene	20
		1.1.2　Lucene的总体架构	20
		1.1.3　分析数据	22
		1.1.4　Lucene查询语言	23
	1.2　何为Elasticsearch	26
		1.2.1　Elasticsearch的基本概念	26
		1.2.2　Elasticsearch架构背后的关键概念	28
		1.2.3　Elasticsearch的工作流程	28
	1.3　在线书店示例	32
	1.4　小结	35
第2章　查询DSL进阶	36
	2.1　Apache Lucene默认评分公式解释	36
		2.1.1　何时文档被匹配上	37
		2.1.2　TF/IDF评分公式	37
		2.1.3　Elasticsearch如何看评分	39
		2.1.4　一个例子	39
	2.2　查询改写	42
		2.2.1　前缀查询示例	42
		2.2.2　回到Apache Lucene	44
		2.2.3　查询改写的属性	46
	2.3　查询模板	48
		2.3.1　引入查询模板	49
		2.3.2　Mustache模板引擎	51
		2.3.3　把查询模板保存到文件	53
	2.4　过滤器的使用及作用原理	54
		2.4.1　过滤及查询相关性	54
		2.4.2　过滤器的工作原理	58
		2.4.3　性能考量	59
		2.4.4　后置过滤和过滤查询	60
		2.4.5　选择正确的过滤方式	62
	2.5　选择正确的查询方式	63
		2.5.1　查询方式分类	63
		2.5.2　使用示例	68
	2.6　小结	83
第3章　不只是文本搜索	84
	3.1　查询二次评分	84
		3.1.1　什么是查询二次评分	85
		3.1.2　一个查询例子	85
		3.1.3　二次评分查询的结构	85
		3.1.4　二次评分参数	88
		3.1.5　总结	88
	3.2　多匹配控制	89
	3.3　重要词项聚合	96
		3.3.1　一个例子	97
		3.3.2　选择重要词项	99
		3.3.3　多值分析	99
		3.3.4　额外的配置	102
		3.3.5　使用限制	107
	3.4　文档分组	107
		3.4.1　top_hits聚合	108
		3.4.2　一个例子	108
	3.5　文档关系	113
		3.5.1　对象类型	113
		3.5.2　嵌套文档	116
		3.5.3　parent-child关系	117
		3.5.4　其他解决方案	120
	3.6　Elasticsearch各版本中脚本的变化	120
		3.6.1　脚本变迁	120
		3.6.2　Groovy简单介绍	121
		3.6.3　全文检索中的脚本	126
		3.6.4　Lucene表达式	133
	3.7　小结	136
第4章　改善用户搜索体验	137
	4.1　改正用户拼写错误	137
		4.1.1　测试数据	138
		4.1.2　深入技术细节	139
		4.1.3　suggester	139
	4.2　改善查询相关性	160
		4.2.1　数据	160
		4.2.2　改善相关性的探索之旅	163
	4.3　小结	175
第5章　分布式索引架构	177
	5.1　选择合适的分片和副本数	177
		5.1.1　分片和过度分配	178
		5.1.2　一个过度分配的正面例子	179
		5.1.3　多分片与多索引	179
		5.1.4　副本	179
	5.2　路由	180
		5.2.1　分片和数据	180
		5.2.2　测试路由功能	180
		5.2.3　索引时使用路由	184
		5.2.4　别名	187
		5.2.5　多个路由值	187
	5.3　调整默认分片的分配行为	188
		5.3.1　部署意识	189
		5.3.2　过滤	191
		5.3.3　运行时更新分配策略	192
		5.3.4　确定每个节点允许的总分片数	193
		5.3.5　确定每个物理机器允许的总分片数	193
	5.4　查询执行偏好	197
	5.5　小结	199
第6章　底层索引控制	200
	6.1　改变Apache Lucene的评分方式	200
		6.1.1　可用的相似度模型	201
		6.1.2　为每字段配置相似度模型	201
		6.1.3　相似度模型配置	202
		6.1.4　选择默认的相似度模型	203
	6.2　选择适当的目录实现—store模块	188
	6.3　准实时、提交、更新及事务日志	209
		6.3.1　索引更新及更新提交	210
		6.3.2　事务日志	211
		6.3.3　准实时读取	212
	6.4　控制索引合并	213
		6.4.1　选择正确的合并策略	214
		6.4.2　合并策略配置	215
		6.4.3　调度	217
	6.5　关于I/O调节	218
		6.5.1　控制I/O节流	218
		6.5.2　配置	218
	6.6　理解Elasticsearch缓存	220
		6.6.1　过滤器缓存	221
		6.6.2　字段数据缓存	222
		6.6.3　查询分片缓存	230
		6.6.4　使用circuit breaker	231
		6.6.5　清除缓存	232
	6.7　小结	233
第7章　管理Elasticsearch	234
	7.1　发现和恢复模块	234
		7.1.1　发现模块的配置	235
		7.1.2　主节点	236
		7.1.3　网关和恢复模块的配置	241
		7.1.4　索引恢复API	244
	7.2　使用人类友好的Cat API	247
		7.2.1　基础知识	248
		7.2.2　使用Cat API	249
		7.2.3　一些例子	250
	7.3　备份	250
	7.4　联盟搜索	254
		7.4.1　测试用的集群	254
		7.4.2　建立部落节点	255
		7.4.3　通过部落节点读取数据	256
		7.4.4　通过部落节点写入数据	257
		7.4.5　处理索引冲突	258
		7.4.6　屏蔽写操作	259
	7.5　小结	260
第8章　提高性能	261
	8.1　使用doc values来优化查询	261
		8.1.1　字段缓存存在的问题	262
		8.1.2　使用doc values的例子	263
	8.2　了解垃圾回收器	265
		8.2.1　Java内存	266
		8.2.2　解决垃圾回收问题	267
		8.2.3　在类UNIX系统上避免内存交换	272
	8.3　对查询做基准测试	273
		8.3.1　为基准测试配置集群	274
		8.3.2　进行基准测试	274
		8.3.3　控制运行中的基准测试	277
	8.4　热点线程	279
		8.4.1　热点线程的使用说明	279
		8.4.2　热点线程API的响应	280
	8.5　扩展Elasticsearch	281
		8.5.1　垂直扩展	281
		8.5.2　水平扩展	282
		8.5.3　在高负载的场景下使用Elasticsearch	289
	8.6　小结	301
第9章　开发Elasticsearch插件	302
	9.1　创建Maven项目	302
	9.2　了解基本知识	303
		9.2.1　Maven Java项目的结构	303
		9.2.2　POM的理念	303
		9.2.3　执行构建过程	304
		9.2.4　引入Maven装配插件	305
	9.3　创建自定义REST行为	307
		9.3.1　设定	307
		9.3.2　实现细节	307
	9.4　创建自定义分析插件	313
		9.4.1　实现细节	313
		9.4.2　测试自定义分析插件	320
	9.5　小结	322
