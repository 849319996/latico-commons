封面	0
版权声明	3
内容提要	3
中文版序	5
译者序	8
译者简介	9
序	10
前言	12
致谢	14
关于本书	15
关于封面插图	19
目录	21
第一部分 Netty的概念及体系结构	25
第1章　Netty——异步和事件驱动	26
	1.1　Java网络编程	27
		1.1.1　Java NIO	28
		1.1.2　选择器	29
	1.2　Netty简介	29
		1.2.1　谁在使用Netty	30
		1.2.2　异步和事件驱动	31
	1.3　Netty的核心组件	32
		1.3.1　Channel	32
		1.3.2　回调	32
		1.3.3　Future	33
		1.3.4　事件和ChannelHandler	34
		1.3.5　把它们放在一起	35
1．Future、回调和ChannelHandler	35
2．选择器、事件和EventLoop	36
	1.4　小结	36
第2章　你的第一款Netty应用程序	37
	2.1　设置开发环境	37
		2.1.1　获取并安装Java开发工具包	37
		2.1.2　下载并安装IDE	38
		2.1.3　下载和安装Apache Maven	38
		2.1.4　配置工具集	39
	2.2　Netty客户端/服务器概览	39
	2.3　编写Echo服务器	40
		2.3.1　ChannelHandler和业务逻辑	40
		2.3.2　引导服务器	41
	2.4　编写Echo客户端	44
		2.4.1　通过ChannelHandler实现客户端逻辑	44
		2.4.2　引导客户端	45
	2.5　构建和运行Echo服务器和客户端	47
		2.5.1　运行构建	47
		2.5.2　运行Echo服务器和客户端	50
	2.6　小结	52
第3章　Netty的组件和设计	53
	3.1　Channel、EventLoop和ChannelFuture	53
		3.1.1　Channel接口	54
		3.1.2　EventLoop接口	54
		3.1.3　ChannelFuture接口	55
	3.2　ChannelHandler和ChannelPipeline	55
		3.2.1　ChannelHandler接口	55
		3.2.2　ChannelPipeline接口	56
		3.2.3　更加深入地了解ChannelHandler	57
		3.2.4　编码器和解码器	58
		3.2.5　抽象类SimpleChannelInboundHandler	58
	3.3　引导	59
	3.4　小结	60
第4章　传输	61
	4.1　案例研究：传输迁移	61
		4.1.1　不通过Netty使用OIO和NIO	62
		4.1.2　通过Netty使用OIO和NIO	64
		4.1.3　非阻塞的Netty版本	65
	4.2　传输API	66
	4.3　内置的传输	68
		4.3.1　NIO——非阻塞I/O	69
		4.3.2　Epoll—用于Linux的本地非阻塞传输	70
		4.3.3　OIO—旧的阻塞I/O	71
		4.3.4　用于JVM内部通信的Local传输	71
		4.3.5　Embedded传输	72
	4.4　传输的用例	72
	4.5　小结	74
第5章　ByteBuf	75
	5.1　ByteBuf的API	75
	5.2　ByteBuf类——Netty的数据容器	76
		5.2.1　它是如何工作的	76
		5.2.2　ByteBuf的使用模式	76
1．堆缓冲区	77
2．直接缓冲区	77
3．复合缓冲区	78
	5.3　字节级操作	80
		5.3.1　随机访问索引	80
		5.3.2　顺序访问索引	80
		5.3.3　可丢弃字节	81
		5.3.4　可读字节	81
		5.3.5　可写字节	82
		5.3.6　索引管理	82
		5.3.7　查找操作	83
		5.3.8　派生缓冲区	83
		5.3.9　读/写操作	85
		5.3.10　更多的操作	87
	5.4　ByteBufHolder接口	88
	5.5　ByteBuf分配	88
		5.5.1　按需分配：ByteBufAllocator接口	88
		5.5.2　Unpooled缓冲区	90
		5.5.3　ByteBufUtil类	90
	5.6　引用计数	90
	5.7　小结	91
第6章　ChannelHandler和 ChannelPipeline	93
	6.1　ChannelHandler家族	93
		6.1.1　Channel的生命周期	93
		6.1.2　ChannelHandler的生命周期	94
		6.1.3　ChannelInboundHandler接口	94
		6.1.4　ChannelOutboundHandler接口	96
		6.1.5　ChannelHandler适配器	97
		6.1.6　资源管理	97
	6.2　ChannelPipeline接口	99
		6.2.1　修改ChannelPipeline	101
		6.2.2　触发事件	102
	6.3　ChannelHandlerContext接口	103
		6.3.1　使用ChannelHandlerContext	105
		6.3.2　ChannelHandler和ChannelHandlerContext的高级用法	107
	6.4　异常处理	109
		6.4.1　处理入站异常	109
		6.4.2　处理出站异常	110
	6.5　小结	111
第7章　EventLoop和线程模型	112
	7.1　线程模型概述	112
	7.2　EventLoop接口	113
		7.2.1　Netty 4中的I/O和事件处理	115
		7.2.2　Netty 3中的I/O操作	115
	7.3　任务调度	116
		7.3.1　JDK的任务调度API	116
		7.3.2　使用EventLoop调度任务	117
	7.4　实现细节	118
		7.4.1　线程管理	118
		7.4.2　EventLoop/线程的分配	119
1．异步传输	119
2．阻塞传输	120
	7.5　小结	121
第8章　引导	122
	8.1　Bootstrap类	122
	8.2　引导客户端和无连接协议	124
		8.2.1　引导客户端	125
		8.2.2　Channel和EventLoopGroup的兼容性	126
	8.3　引导服务器	127
		8.3.1　ServerBootstrap类	127
		8.3.2　引导服务器	128
	8.4　从Channel引导客户端	130
	8.5　在引导过程中添加多个ChannelHandler	131
	8.7　引导DatagramChannel	134
	8.8　关闭	135
	8.9　小结	135
第9章　单元测试	136
	9.1　EmbeddedChannel概述	136
	9.2　使用EmbeddedChannel测试ChannelHandler	138
		9.2.1　测试入站消息	138
		9.2.2　测试出站消息	141
	9.3　测试异常处理	142
	9.4　小结	144
第二部分 编解码器	145
第10章　编解码器框架	146
	10.1　什么是编解码器	146
	10.2　解码器	146
		10.2.1　抽象类ByteToMessageDecoder	147
		10.2.2　抽象类ReplayingDecoder	148
		10.2.3　抽象类MessageToMessageDecoder	149
		10.2.4　TooLongFrameException类	151
	10.3　编码器	152
		10.3.1　抽象类MessageToByteEncoder	152
		10.3.2　抽象类MessageToMessageEncoder	153
	10.4　抽象的编解码器类	154
		10.4.1　抽象类ByteToMessageCodec	154
		10.4.2　抽象类MessageToMessageCodec	155
		10.4.3　CombinedChannelDuplexHandler类	158
	10.5　小结	159
第11章　预置的ChannelHandler和编解码器	160
	11.1　通过SSL/TLS保护Netty应用程序	160
	11.2　构建基于Netty的HTTP/HTTPS应用程序	162
		11.2.1　HTTP解码器、编码器和编解码器	162
		11.2.2　聚合HTTP消息	164
		11.2.3　HTTP压缩	165
		11.2.4　使用HTTPS	166
		11.2.5　WebSocket	167
	11.3　空闲的连接和超时	169
	11.4　解码基于分隔符的协议和基于长度的协议	171
		11.4.1　基于分隔符的协议	171
		11.4.2　基于长度的协议	174
	11.5　写大型数据	176
	11.6　序列化数据	178
		11.6.1　JDK序列化	178
		11.6.2　使用JBoss Marshalling进行序列化	178
		11.6.3　通过Protocol Buffers序列化	180
	11.7　小结	181
第三部 分网络协议	182
第12章　WebSocket	183
	12.1　WebSocket简介	183
	12.2　我们的WebSocket示例应用程序	184
	12.3　添加WebSocket支持	185
		12.3.1　处理HTTP请求	185
		12.3.2　处理WebSocket帧	188
		12.3.3　初始化ChannelPipeline	189
		12.3.4　引导	191
	12.4　测试该应用程序	193
如何进行加密	194
	12.5　小结	196
第13章　使用UDP广播事件	197
	13.1　UDP的基础知识	197
	13.2　UDP广播	198
	13.3　UDP示例应用程序	198
	13.4　消息POJO: LogEvent	199
	13.5　编写广播者	200
	13.6　编写监视器	205
	13.7　运行LogEventBroadcaster和LogEventMonitor	207
	13.8　小结	209
第四部 分案例研究	210
第14章　案例研究，第一部分	211
	14.1　Droplr——构建移动服务	211
		14.1.1　这一切的起因	211
		14.1.2　Droplr是怎样工作的	212
		14.1.3　创造一个更加快速的上传体验	212
		14.1.3.1　1．乐观且看似更加简单的方案	213
		14.1.3.2　2．安全但复杂的方案	213
		14.1.4　技术栈	214
		14.1.4.1　1．基本要素：服务器和流水线	214
		14.1.4.2　2．请求处理器	216
		14.1.4.3　3．父接口	216
		14.1.4.4　4．处理器的实现	217
		14.1.4.5　5．上传请求处理器	217
		14.1.5　性能	217
		14.1.6　小结——站在巨人的肩膀上	218
	14.2　Firebase——实时的数据同步服务	218
		14.2.1　Firebase的架构	219
		14.2.2　长轮询	219
		14.2.2.1　1．保证消息的按顺序投递	220
		14.2.2.2　2．关闭通知	221
		14.2.3　HTTP 1.1 keep-alive和流水线化	222
		14.2.4　控制SslHandler	223
		14.2.5　Firebase小结	225
	14.3　Urban Airship——构建移动服务	225
		14.3.1　移动消息的基础知识	225
		14.3.2　第三方递交	226
		14.3.3　使用二进制协议的例子	227
		14.3.4　直接面向设备的递交	229
		14.3.5　Netty擅长管理大量的并发连接	230
		14.3.6　Urban Airship小结—跨越防火墙边界	231
		14.3.6.1　1．内部的RPC框架	231
		14.3.6.2　2．负载和性能测试	231
		14.3.6.3　3．同步协议的异步客户端	231
	14.4　小结	232
第15章　案例研究，第二部分	233
	15.1　Netty在Facebook的使用：Nifty和Swift0F	233
		15.1.1　什么是Thrift	233
		15.1.2　使用Netty改善Java Thrift的现状	234
		15.1.3　Nifty服务器的设计	235
		15.1.3.1　1．Nifty的编码器/解码器	235
		15.1.3.2　2．在服务器上排序响应	236
		15.1.4　Nifty异步客户端的设计	238
		15.1.4.1　1．流水线化	238
		15.1.4.2　2．多路复用	238
		15.1.5　Swift：一种更快的构建Java Thrift服务的方式	239
		15.1.6　结果	239
		15.1.6.1　1．性能比较	239
		15.1.6.2　2．稳定性问题的例子	240
		15.1.6.3　3．改进C++实现的超时处理	241
		15.1.6.4　4．未来基于Netty 4的改进	241
		15.1.7　Facebook小结	242
	15.2　Netty在Twitter的使用：Finagle	242
		15.2.1　Twitter成长的烦恼	242
		15.2.2　Finagle的诞生	242
		15.2.3　Finagle是如何工作的	243
		15.2.3.1　Netty/Finagle桥接器	244
		15.2.4　Finagle的抽象	248
		15.2.5　故障管理	249
		15.2.6　组合服务	250
		15.2.7　未来：Netty	250
		15.2.8　Twitter小结	251
	15.3　小结	251
附录　Maven介绍	252
	A.1　什么是Maven	252
		A.1.1　安装和配置Maven	253
		A.1.2　Maven的基本概念	253
		A.1.2.1　1．标准的目录结构	253
		A.1.2.2　2．POM大纲	254
		A.1.2.3　3．构件	254
		A.1.2.4　4．POM文件的用例	255
		A.1.2.5　5．GAV坐标	255
		A.1.2.6　6．依赖	256
		A.1.2.7　7．依赖管理	257
		A.1.2.8　8．构建的生命周期	258
		A.1.2.9　9．插件	259
		A.1.2.10　10．插件管理	260
		A.1.2.11　11．配置文件	261
		A.1.2.12　12．存储库	261
		A.1.2.13　13．快照和发布	262
	A.2　POM示例	262
		A.2.1　一个项目的POM	262
		A.2.2　POM的继承和聚合	263
		A.2.2.1　1．POM继承	264
		A.2.2.2　2．POM聚合	264
	A.3　Maven命令行	267
	A.4　小结	268
封底	271
