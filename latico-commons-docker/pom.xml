<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.latico.commons</groupId>
    <artifactId>latico-commons-docker</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <!--邮件管理列表-->
    <mailingLists>
        <mailingList>
            <name>Development List</name>
            <subscribe>dev-subscribe@qq.com</subscribe>
            <unsubscribe>dev-unsubscribe@qq.com</unsubscribe>
            <post>dev@qq.com</post>
        </mailingList>
    </mailingLists>

    <!--开发者-->
    <developers>
        <developer>
            <id>latico</id>
            <name>latico</name>
            <url>latico@qq.com</url>
        </developer>
    </developers>

    <!--许可证-->
    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <!--组织机构-->
    <organization>
        <name>latico</name>
        <url>https://github.com/latico</url>
    </organization>

    <!--项目名称和URL-->
    <issueManagement>
        <!--项目名字，-->
        <system>latico-commons</system>
        <!--该项目使用的URL-->
        <url>https://localhost:8080/latico-commons</url>
    </issueManagement>

    <!--软件配置管理（SCM：Software Configuration Management）功能-->
    <scm>
        <url>https://github.com/latico/latico-commons.git</url>
        <!--<connection>scm:svn:https://github.com/latico/latico-commons.git</connection>-->
        <connection>scm:git:https://github.com/latico/latico-commons.git</connection>
    </scm>

    <!--项目持续集成信息-->
    <ciManagement>
        <!--持续集成系统的名字，例如continuum-->
        <system>jenkins</system>
        <!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。-->
        <url>https://localhost:8080/jenkins</url>
    </ciManagement>

    <!--发布管理，发布到私服地址-->
    <distributionManagement>
        <!-- 私服地址 ，公司级基线仓库 -->
        <repository>
            <id>Releases</id>
            <url>http://172.168.10.100:8081/nexus/content/repositories/releases</url>
        </repository>

        <!-- 私服地址 ，公司级快照仓库 -->
        <snapshotRepository>
            <id>Snapshots</id>
            <url>http://172.168.10.100:8081/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>
    <properties>

        <!-- JDK版本配置 -->
        <java.version>1.8</java.version>

        <!-- JDK版本配置 -->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!-- 项目编码配置 -->
        <project.encoding>UTF-8</project.encoding>
        <!-- 文件拷贝时的编码 -->
        <project.build.sourceEncoding>${project.encoding}</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${project.encoding}</project.reporting.outputEncoding>
        <!-- 编译时的编码 -->
        <maven.compiler.encoding>${project.encoding}</maven.compiler.encoding>
        <!--解决控制台乱码问题-->
        <argLine>-Dfile.encoding=UTF-8</argLine>

        <!--跳过单元测试-->
        <skipTests>true</skipTests>
        <!--web.xml文件不存在的时候，是否报错并失败-->
        <failOnMissingWebXml>false</failOnMissingWebXml>

        <!-- logback版本配置 -->
        <slf4j.version>1.7.25</slf4j.version>
        <logback.version>1.2.3</logback.version>
        <janino.version>3.0.11</janino.version>

        <springboot.version>2.1.3.RELEASE</springboot.version>

        <docker.image.prefix>springboot</docker.image.prefix>
    </properties>
    <!-- 打包配置 -->
    <build>
        <finalName>${project.artifactId}</finalName>

        <plugins>
            <!--插件的顺序决定执行顺序，maven-assembly-plugin插件应该在spring-boot-maven-plugin插件之前执行，这样maven-assembly-plugin插件才能拿到spring-boot-maven-plugin生成的target下面的jar，否则assembly拷贝的jar是普通生成的jar-->
            <!--因为该模块的pom不是继承springboot的父依赖，所以这个打包插件需要参考springboot的父的打包配置-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${springboot.version}</version>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <!--repackage：创建一个自动可执行的jar或war文件。它可以替换常规的artifact，或者用一个单独的classifier附属在maven构建的生命周期中。-->
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--指定启动类-->
                    <!--<mainClass>${start-class}</mainClass>-->
                </configuration>
            </plugin>

            <!-- Docker maven plugin -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                    <dockerDirectory>src/main/docker</dockerDirectory>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <!-- Docker maven plugin -->
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <!--管理导入springboot的父pom-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>${springboot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!-- logback -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
            <optional>true</optional>
        </dependency>
        <!-- logback -->

        <!-- logback condition -->
        <dependency>
            <groupId>org.codehaus.janino</groupId>
            <artifactId>janino</artifactId>
            <version>${janino.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.codehaus.janino</groupId>
            <artifactId>commons-compiler</artifactId>
            <version>${janino.version}</version>
            <optional>true</optional>
        </dependency>
        <!-- logback condition -->
        <!--统一测试包-->
        <dependency>
            <groupId>com.latico.commons</groupId>
            <artifactId>latico-commons-test</artifactId>
            <version>1.0.0</version>
            <scope>test</scope>
        </dependency>
        <!--springboot 依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

    </dependencies>
</project>